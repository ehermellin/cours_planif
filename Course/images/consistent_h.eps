%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 186 159
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, May 22, 2020 at 10:10:52 AM Central European Summer Time
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
186 159 setpagesize
0 0 0 0 setmargins
0 0 setorigin
186 159 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
186.000 0.00000 l
186.000 159.000 l
0.00000 159.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
186.000 0.00000 l
186.000 159.000 l
0.00000 159.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 186 159 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -289.000 -305.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
289.000 305.000 m
475.000 305.000 l
475.000 464.000 l
289.000 464.000 l
289.000 305.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -289.000 -305.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -289.000 -305.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -289.000 -305.000 ] defaultmatrix matrix concatmatrix setmatrix
.611765 0.00000 .235294 RG
newpath
355.000 330.000 m
355.000 343.807 343.807 355.000 330.000 355.000  c
316.193 355.000 305.000 343.807 305.000 330.000  c
305.000 316.193 316.193 305.000 330.000 305.000  c
343.807 305.000 355.000 316.193 355.000 330.000  c
h
f
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
newpath
333.333 335.500 m
331.412 335.500 l
331.412 331.796 l
331.412 331.015 331.370 330.510 331.287 330.281  c
331.203 330.041 331.068 329.859 330.880 329.734  c
330.703 329.609 330.485 329.546 330.224 329.546  c
329.891 329.546 329.589 329.640 329.318 329.828  c
329.057 330.005 328.875 330.244 328.771 330.546  c
328.677 330.848 328.630 331.406 328.630 332.218  c
328.630 335.500 l
326.708 335.500 l
326.708 328.234 l
328.505 328.234 l
328.505 329.312 l
329.130 328.489 329.927 328.078 330.896 328.078  c
331.313 328.078 331.698 328.156 332.052 328.312  c
332.406 328.458 332.672 328.651 332.849 328.890  c
333.026 329.130 333.151 329.401 333.224 329.703  c
333.297 329.994 333.333 330.421 333.333 330.984  c
333.333 335.500 l
h
f
2 J
10.0000 M
.611765 0.00000 .235294 RG
0.00000 0.00000 0.00000 RG
.517647 .470588 .580392 RG
newpath
475.000 439.000 m
475.000 452.807 463.807 464.000 450.000 464.000  c
436.193 464.000 425.000 452.807 425.000 439.000  c
425.000 425.193 436.193 414.000 450.000 414.000  c
463.807 414.000 475.000 425.193 475.000 439.000  c
h
f
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
newpath
446.552 444.984 m
448.740 445.250 l
448.781 445.500 448.870 445.671 449.005 445.765  c
449.182 445.911 449.469 445.984 449.865 445.984  c
450.365 445.984 450.740 445.906 450.990 445.750  c
451.156 445.645 451.281 445.484 451.365 445.265  c
451.427 445.109 451.458 444.817 451.458 444.390  c
451.458 443.328 l
450.886 444.109 450.162 444.500 449.287 444.500  c
448.307 444.500 447.537 444.088 446.974 443.265  c
446.526 442.609 446.302 441.796 446.302 440.828  c
446.302 439.609 446.594 438.682 447.177 438.046  c
447.761 437.401 448.490 437.078 449.365 437.078  c
450.261 437.078 451.000 437.473 451.583 438.265  c
451.583 437.234 l
453.380 437.234 l
453.380 443.750 l
453.380 444.614 453.307 445.255 453.162 445.671  c
453.026 446.098 452.828 446.432 452.568 446.671  c
452.318 446.911 451.979 447.098 451.552 447.234  c
451.125 447.380 450.589 447.453 449.943 447.453  c
448.703 447.453 447.828 447.239 447.318 446.812  c
446.807 446.395 446.552 445.864 446.552 445.218  c
446.552 445.145 446.552 445.067 446.552 444.984  c
h
448.271 440.718 m
448.271 441.489 448.417 442.057 448.708 442.421  c
449.011 442.776 449.380 442.953 449.818 442.953  c
450.287 442.953 450.682 442.770 451.005 442.406  c
451.328 442.031 451.490 441.484 451.490 440.765  c
451.490 440.015 451.333 439.458 451.021 439.093  c
450.719 438.729 450.328 438.546 449.849 438.546  c
449.391 438.546 449.011 438.729 448.708 439.093  c
448.417 439.447 448.271 439.989 448.271 440.718  c
h
f
2 J
10.0000 M
.517647 .470588 .580392 RG
0.00000 0.00000 0.00000 RG
.517647 .470588 .580392 RG
newpath
355.000 439.000 m
355.000 452.807 343.807 464.000 330.000 464.000  c
316.193 464.000 305.000 452.807 305.000 439.000  c
305.000 425.193 316.193 414.000 330.000 414.000  c
343.807 414.000 355.000 425.193 355.000 439.000  c
h
f
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
newpath
326.677 437.234 m
328.458 437.234 l
328.458 438.312 l
328.698 437.947 329.016 437.651 329.412 437.421  c
329.807 437.192 330.245 437.078 330.724 437.078  c
331.568 437.078 332.281 437.411 332.865 438.078  c
333.458 438.734 333.755 439.651 333.755 440.828  c
333.755 442.036 333.458 442.979 332.865 443.656  c
332.271 444.333 331.552 444.671 330.708 444.671  c
330.313 444.671 329.948 444.593 329.615 444.437  c
329.292 444.270 328.953 443.994 328.599 443.609  c
328.599 447.265 l
326.677 447.265 l
326.677 437.234 l
h
328.568 440.750 m
328.568 441.562 328.729 442.166 329.052 442.562  c
329.386 442.947 329.781 443.140 330.240 443.140  c
330.688 443.140 331.057 442.963 331.349 442.609  c
331.651 442.244 331.802 441.656 331.802 440.843  c
331.802 440.083 331.646 439.520 331.333 439.156  c
331.031 438.781 330.656 438.593 330.208 438.593  c
329.740 438.593 329.349 438.776 329.037 439.140  c
328.724 439.505 328.568 440.041 328.568 440.750  c
h
f
2 J
10.0000 M
.517647 .470588 .580392 RG
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
348.505 346.809 m
425.573 416.812 l
S
newpath
431.495 422.191 m
425.974 410.421 l
424.833 416.140 l
419.250 417.824 l
h
f
newpath
403.091 387.214 m
403.091 378.620 l
404.138 378.620 l
404.138 381.698 l
404.628 381.136 405.247 380.854 405.997 380.854  c
406.466 380.854 406.867 380.948 407.200 381.136  c
407.544 381.313 407.789 381.563 407.935 381.886  c
408.081 382.198 408.154 382.662 408.154 383.276  c
408.154 387.214 l
407.107 387.214 l
407.107 383.276 l
407.107 382.745 406.992 382.360 406.763 382.120  c
406.534 381.881 406.211 381.761 405.794 381.761  c
405.482 381.761 405.185 381.844 404.904 382.011  c
404.633 382.167 404.435 382.386 404.310 382.667  c
404.195 382.938 404.138 383.318 404.138 383.808  c
404.138 387.214 l
403.091 387.214 l
h
411.781 389.745 m
411.197 389.006 410.702 388.146 410.296 387.167  c
409.900 386.177 409.702 385.157 409.702 384.104  c
409.702 383.177 409.848 382.287 410.140 381.433  c
410.494 380.443 411.041 379.459 411.781 378.479  c
412.531 378.479 l
412.062 379.292 411.749 379.870 411.593 380.214  c
411.353 380.756 411.166 381.318 411.031 381.901  c
410.864 382.631 410.781 383.365 410.781 384.104  c
410.781 385.990 411.364 387.870 412.531 389.745  c
411.781 389.745 l
h
413.761 387.214 m
413.761 380.995 l
414.699 380.995 l
414.699 381.870 l
415.157 381.193 415.818 380.854 416.683 380.854  c
417.058 380.854 417.402 380.922 417.714 381.058  c
418.037 381.193 418.277 381.370 418.433 381.589  c
418.589 381.808 418.699 382.063 418.761 382.354  c
418.792 382.552 418.808 382.896 418.808 383.386  c
418.808 387.214 l
417.761 387.214 l
417.761 383.433 l
417.761 382.995 417.719 382.672 417.636 382.464  c
417.553 382.256 417.407 382.089 417.199 381.964  c
416.990 381.828 416.745 381.761 416.464 381.761  c
416.016 381.761 415.626 381.907 415.292 382.198  c
414.969 382.479 414.808 383.016 414.808 383.808  c
414.808 387.214 l
413.761 387.214 l
h
421.122 389.745 m
420.372 389.745 l
421.539 387.870 422.122 385.990 422.122 384.104  c
422.122 383.375 422.039 382.646 421.872 381.917  c
421.737 381.334 421.549 380.771 421.310 380.229  c
421.154 379.886 420.841 379.302 420.372 378.479  c
421.122 378.479 l
421.852 379.459 422.393 380.443 422.747 381.433  c
423.049 382.287 423.200 383.177 423.200 384.104  c
423.200 385.157 422.997 386.177 422.591 387.167  c
422.185 388.146 421.695 389.006 421.122 389.745  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
330.000 355.000 m
330.000 406.000 l
S
newpath
330.000 414.000 m
335.000 402.000 l
330.000 405.000 l
325.000 402.000 l
h
f
newpath
296.852 386.933 m
297.883 387.073 l
297.768 387.782 297.477 388.339 297.008 388.745  c
296.539 389.151 295.966 389.354 295.289 389.354  c
294.435 389.354 293.747 389.078 293.227 388.526  c
292.716 387.964 292.461 387.162 292.461 386.120  c
292.461 385.453 292.570 384.870 292.789 384.370  c
293.018 383.860 293.357 383.479 293.805 383.229  c
294.263 382.979 294.763 382.854 295.305 382.854  c
295.971 382.854 296.518 383.026 296.945 383.370  c
297.383 383.703 297.664 384.188 297.789 384.823  c
296.758 384.979 l
296.664 384.563 296.492 384.250 296.242 384.042  c
295.992 383.823 295.690 383.714 295.336 383.714  c
294.805 383.714 294.372 383.907 294.039 384.292  c
293.706 384.667 293.539 385.266 293.539 386.089  c
293.539 386.933 293.701 387.542 294.023 387.917  c
294.346 388.292 294.763 388.479 295.273 388.479  c
295.690 388.479 296.034 388.354 296.305 388.104  c
296.586 387.854 296.768 387.464 296.852 386.933  c
h
300.805 391.745 m
300.221 391.006 299.727 390.146 299.320 389.167  c
298.924 388.177 298.727 387.157 298.727 386.104  c
298.727 385.177 298.872 384.287 299.164 383.433  c
299.518 382.443 300.065 381.459 300.805 380.479  c
301.555 380.479 l
301.086 381.292 300.773 381.870 300.617 382.214  c
300.378 382.756 300.190 383.318 300.055 383.901  c
299.888 384.631 299.805 385.365 299.805 386.104  c
299.805 387.990 300.388 389.870 301.555 391.745  c
300.805 391.745 l
h
302.785 389.214 m
302.785 382.995 l
303.723 382.995 l
303.723 383.870 l
304.181 383.193 304.842 382.854 305.707 382.854  c
306.082 382.854 306.426 382.922 306.738 383.058  c
307.061 383.193 307.301 383.370 307.457 383.589  c
307.613 383.808 307.723 384.063 307.785 384.354  c
307.816 384.552 307.832 384.896 307.832 385.386  c
307.832 389.214 l
306.785 389.214 l
306.785 385.433 l
306.785 384.995 306.743 384.672 306.660 384.464  c
306.577 384.256 306.431 384.089 306.223 383.964  c
306.014 383.828 305.770 383.761 305.488 383.761  c
305.040 383.761 304.650 383.907 304.316 384.198  c
303.993 384.479 303.832 385.016 303.832 385.808  c
303.832 389.214 l
302.785 389.214 l
h
309.725 389.214 m
309.725 388.011 l
310.928 388.011 l
310.928 389.214 l
310.928 389.651 310.850 390.006 310.693 390.276  c
310.537 390.558 310.292 390.771 309.959 390.917  c
309.662 390.464 l
309.881 390.370 310.042 390.224 310.146 390.026  c
310.251 389.839 310.313 389.568 310.334 389.214  c
309.725 389.214 l
h
316.127 391.604 m
316.127 382.995 l
317.080 382.995 l
317.080 383.792 l
317.309 383.479 317.564 383.245 317.846 383.089  c
318.137 382.933 318.486 382.854 318.893 382.854  c
319.424 382.854 319.893 382.990 320.299 383.261  c
320.705 383.532 321.007 383.917 321.205 384.417  c
321.413 384.917 321.518 385.464 321.518 386.058  c
321.518 386.693 321.403 387.266 321.174 387.776  c
320.955 388.287 320.627 388.677 320.189 388.948  c
319.752 389.219 319.294 389.354 318.814 389.354  c
318.460 389.354 318.143 389.282 317.861 389.136  c
317.580 388.979 317.351 388.792 317.174 388.573  c
317.174 391.604 l
316.127 391.604 l
h
317.080 386.136 m
317.080 386.938 317.242 387.532 317.564 387.917  c
317.887 388.292 318.278 388.479 318.736 388.479  c
319.205 388.479 319.606 388.282 319.939 387.886  c
320.273 387.490 320.439 386.875 320.439 386.042  c
320.439 385.250 320.278 384.662 319.955 384.276  c
319.632 383.881 319.242 383.683 318.783 383.683  c
318.335 383.683 317.939 383.891 317.596 384.308  c
317.252 384.724 317.080 385.334 317.080 386.136  c
h
323.488 391.745 m
322.738 391.745 l
323.905 389.870 324.488 387.990 324.488 386.104  c
324.488 385.375 324.405 384.646 324.238 383.917  c
324.103 383.334 323.915 382.771 323.676 382.229  c
323.520 381.886 323.207 381.302 322.738 380.479  c
323.488 380.479 l
324.217 381.459 324.759 382.443 325.113 383.433  c
325.415 384.287 325.566 385.177 325.566 386.104  c
325.566 387.157 325.363 388.177 324.957 389.167  c
324.551 390.146 324.061 391.006 323.488 391.745  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
355.000 439.000 m
417.000 439.000 l
S
newpath
425.000 439.000 m
413.000 434.000 l
416.000 439.000 l
413.000 444.000 l
h
f
newpath
367.922 432.363 m
367.922 423.770 l
368.969 423.770 l
368.969 426.848 l
369.458 426.285 370.078 426.004 370.828 426.004  c
371.297 426.004 371.698 426.098 372.031 426.285  c
372.375 426.462 372.620 426.712 372.766 427.035  c
372.911 427.348 372.984 427.811 372.984 428.426  c
372.984 432.363 l
371.938 432.363 l
371.938 428.426 l
371.938 427.895 371.823 427.509 371.594 427.270  c
371.365 427.030 371.042 426.910 370.625 426.910  c
370.312 426.910 370.016 426.993 369.734 427.160  c
369.464 427.316 369.266 427.535 369.141 427.816  c
369.026 428.087 368.969 428.467 368.969 428.957  c
368.969 432.363 l
367.922 432.363 l
h
376.611 434.895 m
376.028 434.155 375.533 433.296 375.127 432.316  c
374.731 431.327 374.533 430.306 374.533 429.254  c
374.533 428.327 374.679 427.436 374.971 426.582  c
375.325 425.592 375.872 424.608 376.611 423.629  c
377.361 423.629 l
376.893 424.441 376.580 425.020 376.424 425.363  c
376.184 425.905 375.997 426.467 375.861 427.051  c
375.695 427.780 375.611 428.514 375.611 429.254  c
375.611 431.139 376.195 433.020 377.361 434.895  c
376.611 434.895 l
h
378.592 434.754 m
378.592 426.145 l
379.545 426.145 l
379.545 426.941 l
379.774 426.629 380.029 426.395 380.311 426.238  c
380.602 426.082 380.951 426.004 381.357 426.004  c
381.889 426.004 382.357 426.139 382.764 426.410  c
383.170 426.681 383.472 427.066 383.670 427.566  c
383.878 428.066 383.982 428.613 383.982 429.207  c
383.982 429.842 383.868 430.415 383.639 430.926  c
383.420 431.436 383.092 431.827 382.654 432.098  c
382.217 432.368 381.758 432.504 381.279 432.504  c
380.925 432.504 380.607 432.431 380.326 432.285  c
380.045 432.129 379.816 431.941 379.639 431.723  c
379.639 434.754 l
378.592 434.754 l
h
379.545 429.285 m
379.545 430.087 379.706 430.681 380.029 431.066  c
380.352 431.441 380.743 431.629 381.201 431.629  c
381.670 431.629 382.071 431.431 382.404 431.035  c
382.738 430.639 382.904 430.025 382.904 429.191  c
382.904 428.400 382.743 427.811 382.420 427.426  c
382.097 427.030 381.706 426.832 381.248 426.832  c
380.800 426.832 380.404 427.040 380.061 427.457  c
379.717 427.874 379.545 428.483 379.545 429.285  c
h
385.953 434.895 m
385.203 434.895 l
386.370 433.020 386.953 431.139 386.953 429.254  c
386.953 428.525 386.870 427.796 386.703 427.066  c
386.568 426.483 386.380 425.921 386.141 425.379  c
385.984 425.035 385.672 424.452 385.203 423.629  c
385.953 423.629 l
386.682 424.608 387.224 425.592 387.578 426.582  c
387.880 427.436 388.031 428.327 388.031 429.254  c
388.031 430.306 387.828 431.327 387.422 432.316  c
387.016 433.296 386.526 434.155 385.953 434.895  c
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
